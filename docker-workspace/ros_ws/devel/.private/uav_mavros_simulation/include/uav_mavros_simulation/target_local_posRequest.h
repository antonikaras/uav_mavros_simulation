// Generated by gencpp from file uav_mavros_simulation/target_local_posRequest.msg
// DO NOT EDIT!


#ifndef UAV_MAVROS_SIMULATION_MESSAGE_TARGET_LOCAL_POSREQUEST_H
#define UAV_MAVROS_SIMULATION_MESSAGE_TARGET_LOCAL_POSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mavros_msgs/PositionTarget.h>

namespace uav_mavros_simulation
{
template <class ContainerAllocator>
struct target_local_posRequest_
{
  typedef target_local_posRequest_<ContainerAllocator> Type;

  target_local_posRequest_()
    : goal_pos()  {
    }
  target_local_posRequest_(const ContainerAllocator& _alloc)
    : goal_pos(_alloc)  {
  (void)_alloc;
    }



   typedef  ::mavros_msgs::PositionTarget_<ContainerAllocator>  _goal_pos_type;
  _goal_pos_type goal_pos;





  typedef boost::shared_ptr< ::uav_mavros_simulation::target_local_posRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uav_mavros_simulation::target_local_posRequest_<ContainerAllocator> const> ConstPtr;

}; // struct target_local_posRequest_

typedef ::uav_mavros_simulation::target_local_posRequest_<std::allocator<void> > target_local_posRequest;

typedef boost::shared_ptr< ::uav_mavros_simulation::target_local_posRequest > target_local_posRequestPtr;
typedef boost::shared_ptr< ::uav_mavros_simulation::target_local_posRequest const> target_local_posRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uav_mavros_simulation::target_local_posRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uav_mavros_simulation::target_local_posRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uav_mavros_simulation::target_local_posRequest_<ContainerAllocator1> & lhs, const ::uav_mavros_simulation::target_local_posRequest_<ContainerAllocator2> & rhs)
{
  return lhs.goal_pos == rhs.goal_pos;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uav_mavros_simulation::target_local_posRequest_<ContainerAllocator1> & lhs, const ::uav_mavros_simulation::target_local_posRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uav_mavros_simulation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::uav_mavros_simulation::target_local_posRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uav_mavros_simulation::target_local_posRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uav_mavros_simulation::target_local_posRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uav_mavros_simulation::target_local_posRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uav_mavros_simulation::target_local_posRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uav_mavros_simulation::target_local_posRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uav_mavros_simulation::target_local_posRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "15f5dcd919b6e4125a7db7e897fa0533";
  }

  static const char* value(const ::uav_mavros_simulation::target_local_posRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x15f5dcd919b6e412ULL;
  static const uint64_t static_value2 = 0x5a7db7e897fa0533ULL;
};

template<class ContainerAllocator>
struct DataType< ::uav_mavros_simulation::target_local_posRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uav_mavros_simulation/target_local_posRequest";
  }

  static const char* value(const ::uav_mavros_simulation::target_local_posRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uav_mavros_simulation::target_local_posRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavros_msgs/PositionTarget goal_pos\n"
"\n"
"================================================================================\n"
"MSG: mavros_msgs/PositionTarget\n"
"# Message for SET_POSITION_TARGET_LOCAL_NED\n"
"#\n"
"# Some complex system requires all feautures that mavlink\n"
"# message provide. See issue #402.\n"
"\n"
"std_msgs/Header header\n"
"\n"
"uint8 coordinate_frame\n"
"uint8 FRAME_LOCAL_NED = 1\n"
"uint8 FRAME_LOCAL_OFFSET_NED = 7\n"
"uint8 FRAME_BODY_NED = 8\n"
"uint8 FRAME_BODY_OFFSET_NED = 9\n"
"\n"
"uint16 type_mask\n"
"uint16 IGNORE_PX = 1	# Position ignore flags\n"
"uint16 IGNORE_PY = 2\n"
"uint16 IGNORE_PZ = 4\n"
"uint16 IGNORE_VX = 8	# Velocity vector ignore flags\n"
"uint16 IGNORE_VY = 16\n"
"uint16 IGNORE_VZ = 32\n"
"uint16 IGNORE_AFX = 64	# Acceleration/Force vector ignore flags\n"
"uint16 IGNORE_AFY = 128\n"
"uint16 IGNORE_AFZ = 256\n"
"uint16 FORCE = 512	# Force in af vector flag\n"
"uint16 IGNORE_YAW = 1024\n"
"uint16 IGNORE_YAW_RATE = 2048\n"
"\n"
"geometry_msgs/Point position\n"
"geometry_msgs/Vector3 velocity\n"
"geometry_msgs/Vector3 acceleration_or_force\n"
"float32 yaw\n"
"float32 yaw_rate\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::uav_mavros_simulation::target_local_posRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uav_mavros_simulation::target_local_posRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.goal_pos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct target_local_posRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uav_mavros_simulation::target_local_posRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uav_mavros_simulation::target_local_posRequest_<ContainerAllocator>& v)
  {
    s << indent << "goal_pos: ";
    s << std::endl;
    Printer< ::mavros_msgs::PositionTarget_<ContainerAllocator> >::stream(s, indent + "  ", v.goal_pos);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UAV_MAVROS_SIMULATION_MESSAGE_TARGET_LOCAL_POSREQUEST_H
